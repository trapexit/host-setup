#!/usr/bin/env python3

import argparse
import os
import sys
import subprocess


def channel_count(input_filepath):
    args = ['ffprobe',
            '-hide_banner',
            '-v','error',
            '-select_streams','a:0',
            '-show_entries','stream=channels',
            '-of','default=noprint_wrappers=1:nokey=1',
            f"file:{input_filepath}"]
    rv = subprocess.run(args,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE)
    if rv.stdout:
        return int(rv.stdout)
    return None


def has_silence(input_filepath):
    chcnt = channel_count(input_filepath)
    if not chcnt:
        print(f"No audio channels found")
        return False

    threshold = "-50dB"
    duration  = "120"
    for ch in range(chcnt):
        args = ['ffmpeg',
                '-y',
                '-hide_banner',
                '-i',input_filepath,
                '-af',f"pan=mono|c0=c{ch},silencedetect=n={threshold}:d={duration}",
                '-f','null',
                '-']
        rv = subprocess.run(args,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
        if b'silence' in rv.stdout:
            return True
        if b'silence' in rv.stderr:
            return True
    return False


def fix_audio(input_filepath):
    filename, ext = os.path.splitext(input_filepath)
    tmp_output_filepath = filename + ' (fixed audio).tmp.mkv'
    output_filepath = filename + ' (fixed audio).mkv'
    args = ['ffmpeg',
            '-y',
            '-hide_banner',
            '-err_detect','ignore_err',
            '-fflags','+genpts',
            '-i',f"file:{input_filepath}",
            '-c:v','copy',
            '-c:a','flac',
            '-ac','1',
            f"file:{tmp_output_filepath}"]

    print(args)
    rv = subprocess.run(args)
    if rv.returncode == 0:
        args = ['ffmpeg',
                '-y',
                '-hide_banner',
                '-err_detect','ignore_err',
                '-fflags','+genpts',
                '-i',f"file:{tmp_output_filepath}",
                '-c:v','copy',
                '-c:a','flac',
                '-ac','2',
                f"file:{output_filepath}"]
        print(args)
        rv = subprocess.run(args)
        if rv.returncode == 0:
            os.remove(tmp_output_filepath)
            return True

    raise RuntimeError("failed")


def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument("--delete",
                   action='store_true',
                   help="Delete original file on success")
    p.add_argument("--force",
                   action='store_true',
                   help="Force")
    p.add_argument('filepaths',
                   metavar='FILE',
                   nargs='+',
                   help='Files to process')

    return p.parse_args()


if __name__ == '__main__':
    args = parse_args()

    for input_filepath in args.filepaths:
        try:
            if not args.force:
                print(f"Checking: {input_filepath}")
                if not has_silence(input_filepath):
                    print(f"Silence not detected: {input_filepath}")
                    continue

            print(f"Silence not detected: {input_filepath}")
            fix_audio(input_filepath)
            if args.delete:
                os.remove(input_filepath)
                print(f"Deleted {input_filepath}")
        except:
            print(f"Failed to fix audio: {input_filepath}")
